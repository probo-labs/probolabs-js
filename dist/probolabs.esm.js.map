{"version":3,"file":"probolabs.esm.js","sources":["../src/constants.js","../src/utils.js","../src/finders.js","../src/highlight.js"],"sourcesContent":["export const ElementTag = {\n  CLICKABLE: \"CLICKABLE\", // button, link, toggle switch, checkbox, radio, dropdowns, clickable divs\n  FILLABLE: \"FILLABLE\", // input, textarea content_editable, date picker??\n  SELECTABLE: \"SELECTABLE\", // select\n  NON_INTERACTIVE_ELEMENT: 'NON_INTERACTIVE_ELEMENT',\n};\n","export function getElementInfo(element, index) {\n  // Get CSS selector\n  const getCssPath = (el) => {\n    const path = [];\n    while (el.nodeType === Node.ELEMENT_NODE) {\n      let selector = el.nodeName.toLowerCase();\n      if (el.id) {\n        selector = `#${el.id}`;\n        path.unshift(selector);\n        break;\n      } else {\n        let sibling = el;\n        let nth = 1;\n        while (sibling = sibling.previousElementSibling) {\n          if (sibling.nodeName.toLowerCase() === selector) nth++;\n        }\n        if (nth > 1) selector += `:nth-of-type(${nth})`;\n      }\n      path.unshift(selector);\n      el = el.parentNode;\n    }\n    return path.join(' > ');\n  };\n\n  // Get XPath\n  const getXPath = (el) => {\n    if (!el) return '';\n    if (el.id) return `//*[@id=\"${el.id}\"]`;\n    \n    const path = [];\n    while (el && el.nodeType === Node.ELEMENT_NODE) {\n      let selector = el.nodeName.toLowerCase();\n      let sibling = el;\n      let siblingCount = 0;\n      \n      while (sibling = sibling.previousElementSibling) {\n        if (sibling.nodeName.toLowerCase() === selector) siblingCount++;\n      }\n      \n      if (siblingCount) {\n        selector += `[${siblingCount + 1}]`;\n      }\n      \n      path.unshift(selector);\n      el = el.parentNode;\n    }\n    \n    return '/' + path.join('/');\n  };\n\n  // Get bounding box\n  const rect = element.getBoundingClientRect();\n  const boundingBox = {\n    x: rect.x,\n    y: rect.y,\n    width: rect.width,\n    height: rect.height\n  };\n\n  // Return element info\n  return {\n    index: index.toString(),\n    tag: element.tagName.toLowerCase(),\n    type: element.type || '',\n    text: element.textContent.trim(),\n    html: element.outerHTML,\n    xpath: getXPath(element),\n    css_selector: getCssPath(element),\n    bounding_box: boundingBox\n  };\n}\n\nexport function uniquifyElements(elements) {\n  const seen = new Set();\n  return elements.filter(element => {\n    // Get the xpath directly from the element using the same getXPath function\n    const xpath = getElementInfo(element, 0).xpath;\n    if (!seen.has(xpath)) {\n      seen.add(xpath);\n      return true;\n    }\n    return false;\n  });\n}\n\nexport function filterClickableElements(elements) {\n  return elements.filter(element => {\n    const tag = element.tag.toLowerCase();\n    \n    // Common clickable elements\n    if (['a', 'button', 'input', 'select', 'textarea'].includes(tag)) {\n      return true;\n    }\n    \n    // Elements with click-related attributes\n    if (element.html.match(/onclick|role=\"button\"|role=\"link\"|tabindex|cursor:\\s*pointer/)) {\n      return true;\n    }\n    \n    // Elements that look like buttons/links based on classes\n    if (element.html.match(/class=\"[^\"]*\\b(btn|button|link)\\b/)) {\n      return true;\n    }\n    \n    return false;\n  });\n}\n\nexport function filterFormElements(elements) {\n  return elements.filter(element => {\n    const tag = element.tag.toLowerCase();\n    return ['input', 'select', 'textarea'].includes(tag);\n  });\n}\n\nexport function filterTextElements(elements) {\n  return elements.filter(element => {\n    // Skip elements with no text content\n    if (!element.text) {\n      return false;\n    }\n    \n    // Skip form elements\n    const tag = element.tag.toLowerCase();\n    if (['input', 'select', 'textarea'].includes(tag)) {\n      return false;\n    }\n    \n    // Skip elements with only whitespace/special characters\n    if (!element.text.match(/[a-zA-Z0-9]/)) {\n      return false;\n    }\n    \n    return true;\n  });\n}\n\nexport function removeDuplicateXPaths(elements) {\n  // Sort by xpath depth to process shorter paths first\n  const sortedElements = [...elements].sort((a, b) => \n    a.xpath.split('/').length - b.xpath.split('/').length\n  );\n  \n  const seen = new Set();\n  return sortedElements.filter(({xpath}) => {\n    // Check if this xpath starts with any seen xpath\n    if (!Array.from(seen).some(seenXPath => xpath.startsWith(seenXPath))) {\n      seen.add(xpath);\n      return true;\n    }\n    return false;\n  });\n}","import { uniquifyElements } from './utils';\nexport function findDropdowns() {\n  const dropdowns = [];\n  \n  // Native select elements\n  dropdowns.push(...document.querySelectorAll('select'));\n  \n  // Elements with dropdown roles\n  dropdowns.push(...document.querySelectorAll('[role=\"combobox\"], [role=\"listbox\"], [role=\"dropdown\"]'));\n  \n  // Common dropdown class patterns\n  const dropdownPattern = /.*(dropdown|select|combobox).*/i;\n  const elements = document.querySelectorAll('*');\n  const dropdownClasses = Array.from(elements).filter(el => {\n    const hasDropdownClass = dropdownPattern.test(el.className);\n    const validTag = ['li', 'ul', 'span', 'div', 'p'].includes(el.tagName.toLowerCase());\n    const result = hasDropdownClass && validTag;\n    return result;\n  });\n  dropdowns.push(...dropdownClasses);\n  \n  // Elements with aria-haspopup attribute\n  dropdowns.push(...document.querySelectorAll('[aria-haspopup=\"true\"], [aria-haspopup=\"listbox\"]'));\n\n  dropdowns.push(...document.querySelectorAll('nav ul li'));\n\n  // Use uniquifyElements WITHOUT the shortestPrefix parameter\n  return uniquifyElements(dropdowns);\n}\n\nexport function findClickables() {\n  const clickables = [];\n  \n  // <a> tags with href\n  clickables.push(...document.querySelectorAll('a[href]'));\n  \n  // <button> elements\n  clickables.push(...document.querySelectorAll('button'));\n  \n  // input[type=\"button\"], input[type=\"submit\"], etc.\n  clickables.push(...document.querySelectorAll('input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]'));\n  \n  // Elements with role=\"button\"\n  clickables.push(...document.querySelectorAll('[role=\"button\"]'));\n  \n  // Elements with tabindex=\"0\"\n  clickables.push(...document.querySelectorAll('[tabindex=\"0\"]'));\n  \n  // Elements with onclick handlers\n  clickables.push(...document.querySelectorAll('[onclick]'));\n  \n  // Also include dropdowns but without the aggressive filtering\n  clickables.push(...findDropdowns());\n  \n  // Table rows that have role='row' + 'clickable' in class\n  const clickableRows = Array.from(document.querySelectorAll('[role=\"row\"]'))\n    .filter(el => /clickable/i.test(el.className));\n  clickables.push(...clickableRows);\n  \n  // Use regular uniquifyElements without prefix filtering\n  return uniquifyElements(clickables);\n}\n\nexport function findToggles() {\n  const toggles = [];\n  const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n  const togglePattern = /switch|toggle|slider/i;\n  \n  checkboxes.forEach(checkbox => {\n    let isToggle = false;\n    \n    // 1. Check the checkbox's own class and role\n    if (togglePattern.test(checkbox.className) || togglePattern.test(checkbox.getAttribute('role') || '')) {\n      isToggle = true;\n    }\n    \n    // 2. Check up to 3 parent levels\n    if (!isToggle) {\n      let current = checkbox;\n      for (let i = 0; i < 3; i++) {\n        const parent = current.parentElement;\n        if (!parent) break;\n        const parentClasses = parent.className || '';\n        const parentRole = parent.getAttribute('role') || '';\n        if (togglePattern.test(parentClasses) || togglePattern.test(parentRole)) {\n          isToggle = true;\n          break;\n        }\n        current = parent;\n      }\n    }\n    \n    // 3. Check next sibling\n    if (!isToggle) {\n      const sibling = checkbox.nextElementSibling;\n      if (sibling) {\n        const siblingClasses = sibling.className || '';\n        const siblingRole = sibling.getAttribute('role') || '';\n        if (togglePattern.test(siblingClasses) || togglePattern.test(siblingRole)) {\n          isToggle = true;\n        }\n      }\n    }\n    \n    if (isToggle) toggles.push(checkbox);\n  });\n  \n  return uniquifyElements(toggles);\n}\n\nexport function findNonInteractiveElements() {\n  // Get all elements in the document\n  const all = Array.from(document.querySelectorAll('*'));\n  \n  // Filter elements based on Python implementation rules\n  return all.filter(element => {\n    // Check if element is a leaf node (no children)\n    if (!element.firstElementChild) {\n      const tag = element.tagName.toLowerCase();\n      // Check if element is not interactive (matching Python exclusions)\n      if (!['select', 'button', 'a'].includes(tag)) {\n        // Check if element is a text or image element (matching Python inclusions)\n        return ['p', 'span', 'div', 'input', 'textarea'].includes(tag);\n      }\n    }\n    return false;\n  });\n}\n","\nimport { ElementTag } from './constants';\nimport { findDropdowns, findClickables, findToggles, findNonInteractiveElements } from './finders';\nimport { uniquifyElements, getElementInfo } from './utils';\n\nexport const highlight = {\n  execute: async function(elementTypes) {\n    const elements = await findElements(elementTypes);\n    highlightElements(elements);\n    return elements;\n  },\n\n  unexecute: function() {\n    const overlay = document.getElementById('highlight-overlay');\n    if (overlay) {\n      overlay.remove();\n    }\n  },\n\n  getElementInfo\n};\n\n\nexport function unhighlightElements() {\n  const overlay = document.getElementById('highlight-overlay');\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\n\n\n\nexport async function findElements(elementTypes) {\n  const typesArray = Array.isArray(elementTypes) ? elementTypes : [elementTypes];\n  console.log('🔍 Starting element search for types:', typesArray);\n\n  const elements = [];\n  typesArray.forEach(elementType => {\n    if (elementType === ElementTag.FILLABLE) {\n      elements.push(...document.querySelectorAll('input:not([type=\"radio\"]):not([type=\"checkbox\"])'));\n      elements.push(...document.querySelectorAll('textarea'));\n      elements.push(...document.querySelectorAll('[contenteditable=\"true\"]'));\n    }\n    if (elementType === ElementTag.SELECTABLE) {\n      elements.push(...findDropdowns());\n    }\n    if (elementType === ElementTag.CLICKABLE) {\n      elements.push(...findClickables());\n      elements.push(...findToggles());\n      elements.push(...document.querySelectorAll('input[type=\"checkbox\"]'));\n      elements.push(...document.querySelectorAll('input[type=\"radio\"]'));\n    }\n    if (elementType === ElementTag.NON_INTERACTIVE_ELEMENT) {\n      elements.push(...findNonInteractiveElements());\n    }\n  });\n\n  const uniqueElements = uniquifyElements(elements);\n  \n  // Add index to each element's info\n  const elementsWithInfo = uniqueElements.map((element, index) => \n    getElementInfo(element, index)\n  );\n  \n  console.log(`Found ${elementsWithInfo.length} elements:`);\n  elementsWithInfo.forEach(info => {\n    console.log(`Element ${info.index}:`, info);\n  });\n  // TBD - filter out elements that are not visible or not enabled\n  return elementsWithInfo;\n}\n\n// elements is an array of objects with index, xpath\nexport function highlightElements(elements) {\n  console.log('🔍 Highlighting elements:', elements);\n  // Remove any existing overlay\n  const existingOverlay = document.getElementById('highlight-overlay');\n  if (existingOverlay) existingOverlay.remove();\n\n  // Create overlay container\n  const overlay = document.createElement('div');\n  overlay.id = 'highlight-overlay';\n  overlay.style.cssText = `\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 10000;\n  `;\n  document.body.appendChild(overlay);\n\n  // Function to get element by XPath\n  const getElementByXPath = (xpath) => {\n    return document.evaluate(\n      xpath, \n      document, \n      null, \n      XPathResult.FIRST_ORDERED_NODE_TYPE, \n      null\n    ).singleNodeValue;\n  };\n\n  // Function to update highlight positions\n  const updateHighlights = () => {\n    overlay.innerHTML = '';\n    \n    elements.forEach(elementInfo => {\n      const element = getElementByXPath(elementInfo.xpath);\n      if (!element) return;\n\n      const rect = element.getBoundingClientRect();\n      \n      // Create border highlight (red rectangle)\n      const highlight = document.createElement('div');\n      highlight.style.cssText = `\n        position: fixed;\n        left: ${rect.x}px;\n        top: ${rect.y}px;\n        width: ${rect.width}px;\n        height: ${rect.height}px;\n        border: 1px solid rgb(255, 0, 0);\n        transition: all 0.2s ease-in-out;\n      `;\n\n      // Create index label container - now positioned to the right and slightly up\n      const labelContainer = document.createElement('div');\n      labelContainer.style.cssText = `\n        position: absolute;\n        right: -4px;     /* Offset to the right */\n        top: -4px;       /* Offset upwards */\n        padding: 4px;\n        background-color: rgb(255, 255, 0);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      `;\n\n      const text = document.createElement('span');\n      text.style.cssText = `\n        color: rgb(0, 0, 0);\n        font-family: Arial, sans-serif;\n        font-size: 12px;\n        line-height: 1;\n      `;\n      text.textContent = elementInfo.index;\n      \n      labelContainer.appendChild(text);\n      highlight.appendChild(labelContainer);\n      overlay.appendChild(highlight);\n    });\n  };\n\n  // Initial highlight\n  updateHighlights();\n\n  // Update highlights on scroll and resize\n  const scrollHandler = () => {\n    requestAnimationFrame(updateHighlights);\n  };\n  \n  window.addEventListener('scroll', scrollHandler, true);\n  window.addEventListener('resize', updateHighlights);\n\n  // Store event handlers for cleanup\n  overlay.scrollHandler = scrollHandler;\n  overlay.updateHighlights = updateHighlights;\n}\n\nfunction unexecute() {\n  const overlay = document.getElementById('highlight-overlay');\n  if (overlay) {\n    // Remove event listeners\n    window.removeEventListener('scroll', overlay.scrollHandler, true);\n    window.removeEventListener('resize', overlay.updateHighlights);\n    overlay.remove();\n  }\n}\n\n// Make it available globally for both Extension and Playwright\nif (typeof window !== 'undefined') {\n  window.ProboLabs = {\n    ElementTag,\n    highlight,\n    unhighlightElements,\n    findElements,\n    highlightElements\n  };\n}\n\n\n"],"names":["ElementTag","CLICKABLE","FILLABLE","SELECTABLE","NON_INTERACTIVE_ELEMENT","getElementInfo","element","index","rect","getBoundingClientRect","boundingBox","x","y","width","height","toString","tag","tagName","toLowerCase","type","text","textContent","trim","html","outerHTML","xpath","el","id","path","nodeType","Node","ELEMENT_NODE","selector","nodeName","sibling","siblingCount","previousElementSibling","unshift","parentNode","join","getXPath","css_selector","nth","getCssPath","bounding_box","uniquifyElements","elements","seen","Set","filter","has","add","findDropdowns","dropdowns","push","document","querySelectorAll","dropdownPattern","dropdownClasses","Array","from","hasDropdownClass","test","className","validTag","includes","highlight","execute","async","elementTypes","findElements","highlightElements","unexecute","overlay","getElementById","remove","unhighlightElements","typesArray","isArray","console","log","forEach","elementType","clickables","clickableRows","findClickables","toggles","checkboxes","togglePattern","checkbox","isToggle","getAttribute","current","i","parent","parentElement","parentClasses","parentRole","nextElementSibling","siblingClasses","siblingRole","findToggles","firstElementChild","elementsWithInfo","map","length","info","existingOverlay","createElement","style","cssText","body","appendChild","updateHighlights","innerHTML","elementInfo","evaluate","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","labelContainer","scrollHandler","requestAnimationFrame","window","addEventListener","ProboLabs"],"mappings":"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"}